/*
 * generated by Xtext
 */
grammar InternalMusy;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ufscar.compiladores2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ufscar.compiladores2.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ufscar.compiladores2.services.MusyGrammarAccess;

}

@parser::members {

 	private MusyGrammarAccess grammarAccess;
 	
    public InternalMusyParser(TokenStream input, MusyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Midi";	
   	}
   	
   	@Override
   	protected MusyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMidi
entryRuleMidi returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMidiRule()); }
	 iv_ruleMidi=ruleMidi 
	 { $current=$iv_ruleMidi.current; } 
	 EOF 
;

// Rule Midi
ruleMidi returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MIDI' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMidiAccess().getMIDIKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMidiAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMidiRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMidiAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMidiAccess().getBodyMidiBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleMidiBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMidiRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"MidiBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMidiAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMidiBody
entryRuleMidiBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMidiBodyRule()); }
	 iv_ruleMidiBody=ruleMidiBody 
	 { $current=$iv_ruleMidiBody.current; } 
	 EOF 
;

// Rule MidiBody
ruleMidiBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMidiBodyAccess().getMidiBodyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMidiBodyAccess().getParamParameterParserRuleCall_1_0()); 
	    }
		lv_param_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMidiBodyRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMidiBodyAccess().getChordsDeclaredChordParserRuleCall_2_0()); 
	    }
		lv_chords_2_0=ruleDeclaredChord		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMidiBodyRule());
	        }
       		add(
       			$current, 
       			"chords",
        		lv_chords_2_0, 
        		"DeclaredChord");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMidiBodyAccess().getTracksTrackParserRuleCall_3_0()); 
	    }
		lv_tracks_3_0=ruleTrack		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMidiBodyRule());
	        }
       		add(
       			$current, 
       			"tracks",
        		lv_tracks_3_0, 
        		"Track");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getParameterBeatParserRuleCall_0()); 
    }
    this_ParameterBeat_0=ruleParameterBeat
    { 
        $current = $this_ParameterBeat_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getParameterTimeSignatureParserRuleCall_1()); 
    }
    this_ParameterTimeSignature_1=ruleParameterTimeSignature
    { 
        $current = $this_ParameterTimeSignature_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getParameterTimeNoteParserRuleCall_2()); 
    }
    this_ParameterTimeNote_2=ruleParameterTimeNote
    { 
        $current = $this_ParameterTimeNote_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getParameterTimePauseParserRuleCall_3()); 
    }
    this_ParameterTimePause_3=ruleParameterTimePause
    { 
        $current = $this_ParameterTimePause_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getParameterOctaveParserRuleCall_4()); 
    }
    this_ParameterOctave_4=ruleParameterOctave
    { 
        $current = $this_ParameterOctave_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParameterBeat
entryRuleParameterBeat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterBeatRule()); }
	 iv_ruleParameterBeat=ruleParameterBeat 
	 { $current=$iv_ruleParameterBeat.current; } 
	 EOF 
;

// Rule ParameterBeat
ruleParameterBeat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BPM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterBeatAccess().getBPMKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterBeatAccess().getColonKeyword_1());
    }
(
(
		lv_beat_2_0=RULE_INT
		{
			newLeafNode(lv_beat_2_0, grammarAccess.getParameterBeatAccess().getBeatINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterBeatRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"beat",
        		lv_beat_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleParameterTimeSignature
entryRuleParameterTimeSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterTimeSignatureRule()); }
	 iv_ruleParameterTimeSignature=ruleParameterTimeSignature 
	 { $current=$iv_ruleParameterTimeSignature.current; } 
	 EOF 
;

// Rule ParameterTimeSignature
ruleParameterTimeSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TIME_SIGNATURE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterTimeSignatureAccess().getTIME_SIGNATUREKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterTimeSignatureAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterTimeSignatureAccess().getTsigTimeSignatureParserRuleCall_2_0()); 
	    }
		lv_tsig_2_0=ruleTimeSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterTimeSignatureRule());
	        }
       		set(
       			$current, 
       			"tsig",
        		lv_tsig_2_0, 
        		"TimeSignature");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterTimeNote
entryRuleParameterTimeNote returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterTimeNoteRule()); }
	 iv_ruleParameterTimeNote=ruleParameterTimeNote 
	 { $current=$iv_ruleParameterTimeNote.current; } 
	 EOF 
;

// Rule ParameterTimeNote
ruleParameterTimeNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TIME_NOTE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterTimeNoteAccess().getTIME_NOTEKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterTimeNoteAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterTimeNoteAccess().getTnTnParserRuleCall_2_0()); 
	    }
		lv_tn_2_0=ruleTn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterTimeNoteRule());
	        }
       		set(
       			$current, 
       			"tn",
        		lv_tn_2_0, 
        		"Tn");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterTimePause
entryRuleParameterTimePause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterTimePauseRule()); }
	 iv_ruleParameterTimePause=ruleParameterTimePause 
	 { $current=$iv_ruleParameterTimePause.current; } 
	 EOF 
;

// Rule ParameterTimePause
ruleParameterTimePause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TIME_PAUSE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterTimePauseAccess().getTIME_PAUSEKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterTimePauseAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterTimePauseAccess().getTpTpParserRuleCall_2_0()); 
	    }
		lv_tp_2_0=ruleTp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterTimePauseRule());
	        }
       		set(
       			$current, 
       			"tp",
        		lv_tp_2_0, 
        		"Tp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterOctave
entryRuleParameterOctave returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterOctaveRule()); }
	 iv_ruleParameterOctave=ruleParameterOctave 
	 { $current=$iv_ruleParameterOctave.current; } 
	 EOF 
;

// Rule ParameterOctave
ruleParameterOctave returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='OCTAVE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterOctaveAccess().getOCTAVEKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterOctaveAccess().getColonKeyword_1());
    }
(
(
		lv_octave_2_0=RULE_INT
		{
			newLeafNode(lv_octave_2_0, grammarAccess.getParameterOctaveAccess().getOctaveINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterOctaveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"octave",
        		lv_octave_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleDeclaredChord
entryRuleDeclaredChord returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredChordRule()); }
	 iv_ruleDeclaredChord=ruleDeclaredChord 
	 { $current=$iv_ruleDeclaredChord.current; } 
	 EOF 
;

// Rule DeclaredChord
ruleDeclaredChord returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='chord' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclaredChordAccess().getChordKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclaredChordAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredChordAccess().getCpChordParamsParserRuleCall_2_0()); 
	    }
		lv_cp_2_0=ruleChordParams		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredChordRule());
	        }
       		set(
       			$current, 
       			"cp",
        		lv_cp_2_0, 
        		"ChordParams");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeclaredChordAccess().getRightParenthesisKeyword_3());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getDeclaredChordAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclaredChordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTrack
entryRuleTrack returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrackRule()); }
	 iv_ruleTrack=ruleTrack 
	 { $current=$iv_ruleTrack.current; } 
	 EOF 
;

// Rule Track
ruleTrack returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TRACK' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTrackAccess().getTRACKKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTrackAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTrackAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrackAccess().getIInstrumentParserRuleCall_3_0()); 
	    }
		lv_i_3_0=ruleInstrument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrackRule());
	        }
       		set(
       			$current, 
       			"i",
        		lv_i_3_0, 
        		"Instrument");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTrackAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrackAccess().getTbodyTrackBodyParserRuleCall_5_0()); 
	    }
		lv_tbody_5_0=ruleTrackBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrackRule());
	        }
       		set(
       			$current, 
       			"tbody",
        		lv_tbody_5_0, 
        		"TrackBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTrackAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTrackBody
entryRuleTrackBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrackBodyRule()); }
	 iv_ruleTrackBody=ruleTrackBody 
	 { $current=$iv_ruleTrackBody.current; } 
	 EOF 
;

// Rule TrackBody
ruleTrackBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrackBodyAccess().getBcBodyComponentParserRuleCall_0_0()); 
	    }
		lv_bc_0_0=ruleBodyComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrackBodyRule());
	        }
       		add(
       			$current, 
       			"bc",
        		lv_bc_0_0, 
        		"BodyComponent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrackBodyAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrackBodyAccess().getBcBodyComponentParserRuleCall_1_1_0()); 
	    }
		lv_bc_2_0=ruleBodyComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrackBodyRule());
	        }
       		add(
       			$current, 
       			"bc",
        		lv_bc_2_0, 
        		"BodyComponent");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBodyComponent
entryRuleBodyComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyComponentRule()); }
	 iv_ruleBodyComponent=ruleBodyComponent 
	 { $current=$iv_ruleBodyComponent.current; } 
	 EOF 
;

// Rule BodyComponent
ruleBodyComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBodyComponentAccess().getNoteNoteParserRuleCall_0_0()); 
	    }
		lv_note_0_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyComponentRule());
	        }
       		set(
       			$current, 
       			"note",
        		lv_note_0_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyComponentAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyComponentRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBodyComponentRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getBodyComponentAccess().getChDeclaredChordCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BLOCK' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getBLOCKKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getBlockbodyTrackBodyParserRuleCall_3_0()); 
	    }
		lv_blockbody_3_0=ruleTrackBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"blockbody",
        		lv_blockbody_3_0, 
        		"TrackBody");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTimeSignature
entryRuleTimeSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeSignatureRule()); }
	 iv_ruleTimeSignature=ruleTimeSignature 
	 { $current=$iv_ruleTimeSignature.current; } 
	 EOF 
;

// Rule TimeSignature
ruleTimeSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_quantity_0_0=RULE_INT
		{
			newLeafNode(lv_quantity_0_0, grammarAccess.getTimeSignatureAccess().getQuantityINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeSignatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"quantity",
        		lv_quantity_0_0, 
        		"INT");
	    }

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTimeSignatureAccess().getSolidusKeyword_1());
    }
(
(
		lv_note_2_0=RULE_INT
		{
			newLeafNode(lv_note_2_0, grammarAccess.getTimeSignatureAccess().getNoteINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeSignatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"note",
        		lv_note_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleTp
entryRuleTp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTpRule()); } 
	 iv_ruleTp=ruleTp 
	 { $current=$iv_ruleTp.current.getText(); }  
	 EOF 
;

// Rule Tp
ruleTp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='sb' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTpAccess().getSbKeyword_0()); 
    }

    |
	kw='m' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTpAccess().getMKeyword_1()); 
    }

    |
	kw='sm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTpAccess().getSmKeyword_2()); 
    }

    |
	kw='cl' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTpAccess().getClKeyword_3()); 
    }

    |
	kw='sc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTpAccess().getScKeyword_4()); 
    }

    |
	kw='f' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTpAccess().getFKeyword_5()); 
    }

    |
	kw='sf' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTpAccess().getSfKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleTn
entryRuleTn returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTnRule()); } 
	 iv_ruleTn=ruleTn 
	 { $current=$iv_ruleTn.current.getText(); }  
	 EOF 
;

// Rule Tn
ruleTn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTnAccess().getTpParserRuleCall()); 
    }
    this_Tp_0=ruleTp    {
		$current.merge(this_Tp_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleChordParams
entryRuleChordParams returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChordParamsRule()); }
	 iv_ruleChordParams=ruleChordParams 
	 { $current=$iv_ruleChordParams.current; } 
	 EOF 
;

// Rule ChordParams
ruleChordParams returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChordParamsAccess().getCnoteNoteParserRuleCall_0_0()); 
	    }
		lv_cnote_0_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChordParamsRule());
	        }
       		add(
       			$current, 
       			"cnote",
        		lv_cnote_0_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChordParamsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChordParamsAccess().getCnoteNoteParserRuleCall_1_1_0()); 
	    }
		lv_cnote_2_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChordParamsRule());
	        }
       		add(
       			$current, 
       			"cnote",
        		lv_cnote_2_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNoteLetter
entryRuleNoteLetter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoteLetterRule()); } 
	 iv_ruleNoteLetter=ruleNoteLetter 
	 { $current=$iv_ruleNoteLetter.current.getText(); }  
	 EOF 
;

// Rule NoteLetter
ruleNoteLetter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='C' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteLetterAccess().getCKeyword_0()); 
    }

    |
	kw='D' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteLetterAccess().getDKeyword_1()); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteLetterAccess().getEKeyword_2()); 
    }

    |
	kw='F' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteLetterAccess().getFKeyword_3()); 
    }

    |
	kw='G' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteLetterAccess().getGKeyword_4()); 
    }

    |
	kw='A' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteLetterAccess().getAKeyword_5()); 
    }

    |
	kw='B' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteLetterAccess().getBKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleAccident
entryRuleAccident returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccidentRule()); } 
	 iv_ruleAccident=ruleAccident 
	 { $current=$iv_ruleAccident.current.getText(); }  
	 EOF 
;

// Rule Accident
ruleAccident returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAccidentAccess().getNumberSignKeyword_0()); 
    }

    |
	kw='b' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAccidentAccess().getBKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current; } 
	 EOF 
;

// Rule Note
ruleNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNoteAccess().getNlNoteLetterParserRuleCall_0_0()); 
	    }
		lv_nl_0_0=ruleNoteLetter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoteRule());
	        }
       		set(
       			$current, 
       			"nl",
        		lv_nl_0_0, 
        		"NoteLetter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNoteAccess().getAccAccidentParserRuleCall_1_0()); 
	    }
		lv_acc_1_0=ruleAccident		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoteRule());
	        }
       		set(
       			$current, 
       			"acc",
        		lv_acc_1_0, 
        		"Accident");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNoteAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoteAccess().getCnpCustomNoteParamParserRuleCall_2_1_0()); 
	    }
		lv_cnp_3_0=ruleCustomNoteParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoteRule());
	        }
       		set(
       			$current, 
       			"cnp",
        		lv_cnp_3_0, 
        		"CustomNoteParam");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNoteAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleInstrument
entryRuleInstrument returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstrumentRule()); } 
	 iv_ruleInstrument=ruleInstrument 
	 { $current=$iv_ruleInstrument.current.getText(); }  
	 EOF 
;

// Rule Instrument
ruleInstrument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PIANO' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstrumentAccess().getPIANOKeyword_0()); 
    }

    |
	kw='GUITAR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstrumentAccess().getGUITARKeyword_1()); 
    }

    |
	kw='ELETRIC GUITAR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstrumentAccess().getELETRICGUITARKeyword_2()); 
    }

    |
	kw='BASS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstrumentAccess().getBASSKeyword_3()); 
    }

    |
	kw='SAX' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstrumentAccess().getSAXKeyword_4()); 
    }

    |
	kw='VIOLIN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstrumentAccess().getVIOLINKeyword_5()); 
    }

    |
	kw='DRUMS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstrumentAccess().getDRUMSKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleCustomNoteParam
entryRuleCustomNoteParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustomNoteParamRule()); }
	 iv_ruleCustomNoteParam=ruleCustomNoteParam 
	 { $current=$iv_ruleCustomNoteParam.current; } 
	 EOF 
;

// Rule CustomNoteParam
ruleCustomNoteParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_octave_0_0=RULE_INT
		{
			newLeafNode(lv_octave_0_0, grammarAccess.getCustomNoteParamAccess().getOctaveINTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomNoteParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"octave",
        		lv_octave_0_0, 
        		"INT");
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCustomNoteParamAccess().getCommaKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomNoteParamAccess().getDurationTnParserRuleCall_0_2_0()); 
	    }
		lv_duration_2_0=ruleTn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomNoteParamRule());
	        }
       		set(
       			$current, 
       			"duration",
        		lv_duration_2_0, 
        		"Tn");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getCustomNoteParamAccess().getDurationTnParserRuleCall_1_0_0()); 
	    }
		lv_duration_3_0=ruleTn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomNoteParamRule());
	        }
       		set(
       			$current, 
       			"duration",
        		lv_duration_3_0, 
        		"Tn");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCustomNoteParamAccess().getCommaKeyword_1_1());
    }
(
(
		lv_octave_5_0=RULE_INT
		{
			newLeafNode(lv_octave_5_0, grammarAccess.getCustomNoteParamAccess().getOctaveINTTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomNoteParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"octave",
        		lv_octave_5_0, 
        		"INT");
	    }

)
))
    |(
(
		lv_octave_6_0=RULE_INT
		{
			newLeafNode(lv_octave_6_0, grammarAccess.getCustomNoteParamAccess().getOctaveINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomNoteParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"octave",
        		lv_octave_6_0, 
        		"INT");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomNoteParamAccess().getDurationTnParserRuleCall_3_0()); 
	    }
		lv_duration_7_0=ruleTn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomNoteParamRule());
	        }
       		set(
       			$current, 
       			"duration",
        		lv_duration_7_0, 
        		"Tn");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


